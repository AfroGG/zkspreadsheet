<zk>
	<vlayout hflex="1" vflex="1">
		<label pre="true">
1. scroll down (by mouse scroll wheel) to row 200
2. select column and insert 1 column
		</label>
		<hbox>
		<button label="go to last row" onClick="ss.focusTo(201,0);"></button>
		<button label="insert 1 column on B" onClick='Ranges.range(ss.getSelectedSheet(), "B1").toColumnRange().insert(org.zkoss.zss.api.Range.InsertShift.DEFAULT, org.zkoss.zss.api.Range.InsertCopyOrigin.FORMAT_LEFT_ABOVE)'></button>
		</hbox>
		<button label="export" onClick="export();"></button>
		<hlayout>
			<button label="insert columns (left format)" onClick="insert(false, org.zkoss.zss.api.Range.InsertCopyOrigin.FORMAT_LEFT_ABOVE);"></button>
			<button label="insert columns (right format)" onClick="insert(false, org.zkoss.zss.api.Range.InsertCopyOrigin.FORMAT_RIGHT_BELOW);"></button>
		</hlayout>
		<hlayout>
			<button label="insert rows (above format)" onClick="insert(true, org.zkoss.zss.api.Range.InsertCopyOrigin.FORMAT_LEFT_ABOVE);"></button>
			<button label="insert rows (below format )" onClick="insert(true, org.zkoss.zss.api.Range.InsertCopyOrigin.FORMAT_RIGHT_BELOW);"></button>
		</hlayout>
		<spreadsheet id="ss" src="/book/blank.xlsx"  hflex="1" vflex="1"
			ctrlKeys="^c^x^v^d^s^o^b^i^u#del^#del^z^y^e"
			maxrows="200" maxcolumns="100"
			showFormulabar="true" showContextMenu="true" showSheetbar="true" showToolbar="true">
		</spreadsheet>
		
		<zscript><![CDATA[
		                  
			public void insert(boolean isRow, org.zkoss.zss.api.Range.InsertCopyOrigin copyOrigin) {
				// if you select row but click insert column, it might throw exception about XML bean
				Range r = Ranges.range(ss.getSelectedSheet(), ss.getSelection());
				if(isRow && r.isWholeRow()) {
					r.toRowRange().insert(org.zkoss.zss.api.Range.InsertShift.DEFAULT, copyOrigin);
				} else if(!isRow && r.isWholeColumn()) {
					r.toColumnRange().insert(org.zkoss.zss.api.Range.InsertShift.DEFAULT, copyOrigin);
				}
			}

		    public void addData(Sheet sheet) {
				// text
				for(int r = 0 ; r < 20 ; ++r) {
					for(int c = 0 ; c < 10 ; ++ c) {
						Ranges.range(sheet, r, c).setCellEditText(String.valueOf(c + (r * 10)));
					}
				}
				Ranges.range(sheet, "CA1").setCellEditText("CA1");
				Ranges.range(sheet, "CA3").setCellEditText("CA3");
				Ranges.range(sheet, "CA190").setCellEditText("CA190");
				Ranges.range(sheet, "A190").setCellEditText("C190");
				Ranges.range(sheet, "C190").setCellEditText("C190");
				// style
				String[] colors = {"#CCCCCC", "#FF0000", "#FF00FF", "#00FF00", "#00FFFF", "#0000FF", "#AAAAAA"};
				for(int r = 0 ; r < 10 ; ++r) {
					for(int c = 0 ; c < colors.length ; ++c) {
						Range re = Ranges.range(sheet, r, c);
					    CellOperationUtil.applyBackgroundColor(re, colors[c]);
					}
				}
				for(int c = 0 ; c < 7 ; ++c) {
					for(int r = 0 ; r < colors.length ; ++r) {
						Range re = Ranges.range(sheet, r + 10, c);
					    CellOperationUtil.applyBackgroundColor(re, colors[r]);
					}
				}
		    }

			public void export() {
				Exporter exporter = Exporters.getExporter();
				java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();
				exporter.export(ss.getBook(), os);
				os.close();
				org.zkoss.zul.Filedownload.save(os.toByteArray(),
						"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "exported.xlsx");
			}
			
		    // freeze panels
			Ranges.range(ss.getBook().getSheetAt(0)).setFreezePanel(2, 2);
			Ranges.range(ss.getBook().getSheetAt(1)).setFreezePanel(2, 0);
			Ranges.range(ss.getBook().getSheetAt(2)).setFreezePanel(0, 2);
			addData(ss.getBook().getSheetAt(0));
			addData(ss.getBook().getSheetAt(1));
			addData(ss.getBook().getSheetAt(2));
		]]></zscript>
		
		<script defer="true"><![CDATA[
			(function() {
				window.debug = {};
				window.debug.ss = zk.Widget.$('$ss');
				window.debug.ssc = debug.ss.sheetCtrl;
				window.debug.dp = debug.ssc.dp;
				window.debug.cc = debug.ss._cacheCtrl.getSelectedSheet();
			})();
		]]></script>
	</vlayout>
</zk>